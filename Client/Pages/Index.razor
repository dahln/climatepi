@page "/"

@using daedalus.Shared.Model

@inject daedalus.Client.Services.API API

<div class="row mt-4">
    <div class="col-lg-3">
        <div class="input-group">
            <select class="form-control" @bind="ReportPeriod">
                <option value="@PeriodType.Today">@PeriodType.Today.GetDescription()</option>
                <option value="@PeriodType.Yesterday">@PeriodType.Yesterday.GetDescription()</option>
                <option value="@PeriodType.LastSeven">@PeriodType.LastSeven.GetDescription()</option>
                <option value="@PeriodType.CurrentMonth">@PeriodType.CurrentMonth.GetDescription()</option>
                <option value="@PeriodType.PreviousMonth">@PeriodType.PreviousMonth.GetDescription()</option>
                <option value="@PeriodType.CurrentYear">@PeriodType.CurrentYear.GetDescription()</option>
                <option value="@PeriodType.PreviousYear">@PeriodType.PreviousYear.GetDescription()</option>
            </select>
            <div class="input-group-append">
                <button class="btn btn-success" type="button" @onclick="() => SearchConditions(0)">Run</button>
            </div>
        </div>
    </div>
</div>

@if(results.Total > 0 && Ready)
{
    <div class="row mt-3">
        <div class="col-lg-3 mt-2">
            <div class="card">
                <h5 class="card-header">
                    <i class="fas fa-temperature-high"></i> Temperature 
                </h5>
                <div class="card-body">
                    <h6 class="card-title">Low: <span class="low">@(Math.Round(results.LowTemperature, 2).ToString("0.00")) &deg;</span></h6>
                    <h6 class="card-title">Average: <span class="average">@(Math.Round(results.AverageTemperature, 2).ToString("0.00")) &deg;</span></h6>
                    <h6 class="card-title">High: <span class="high">@(Math.Round(results.HighTemperature, 2).ToString("0.00")) &deg;</span></h6>
                </div>
            </div>
        </div>
        <div class="col-lg-3 mt-2">
            <div class="card">
                <h5 class="card-header">
                    <i class="fas fa-umbrella"></i> Humidity
                </h5>
                <div class="card-body">
                    <h6 class="card-title">Low: <span class="low">@(Math.Round(results.LowHumidity, 2).ToString("0.00")) %</span></h6>
                    <h6 class="card-title">Average: <span class="average">@(Math.Round(results.AverageHumidity, 2).ToString("0.00")) %</span></h6>
                    <h6 class="card-title">High: <span class="high">@(Math.Round(results.HighHumidity, 2).ToString("0.00")) %</span></h6>
                </div>
            </div>
        </div>
        <div class="col-lg-3 mt-2">
            <div class="card">
                <h5 class="card-header">
                    <i class="fas fa-wind"></i> Pressure
                </h5>
                <div class="card-body">
                    <h6 class="card-title">Low: <span class="low">@(Math.Round(results.LowPressure, 2).ToString("0.00")) mbar</span></h6>
                    <h6 class="card-title">Average: <span class="average">@(Math.Round(results.AveragePressure, 2).ToString("0.00")) mbar</span></h6>
                    <h6 class="card-title">High: <span class="high">@(Math.Round(results.HighPressure, 2).ToString("0.00")) mbar</span></h6>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-lg-12">
            <nav aria-label="Page navigation example">
                <ul class="pagination float-right">
                    @if ((Page + 1) > 1)
                    {
                        <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchConditions(Page - 1))">Previous</div></li>
                    }
                    <li class="page-item"><div class="page-link">Page @(results.Total == 0 ? 0 : (Page + 1)) of @(Math.Ceiling((double)results.Total / Size))</div></li>
                    @if ((Page + 1) < (Math.Ceiling((double)results.Total / Size)))
                    {
                        <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchConditions(Page + 1))">Next</div></li>
                    }
                </ul>
            </nav>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Logged At</th>
                        <th>Temperature</th>
                        <th>Humidity</th>
                        <th>Pressure</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var condition in results.Data)
                    {
                        <tr>
                            <td>@condition.LoggedAt.ToLocalTime()</td>
                            <td>@(Math.Round(condition.DegreesCelsius, 2).ToString("0.00")) &deg;C</td>
                            <td>@(Math.Round(condition.HumidityPercentage, 2).ToString("0.00")) %</td>
                            <td>@(Math.Round(condition.PressureMillibars, 2).ToString("0.00")) mbar</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <nav aria-label="Page navigation example">
                <ul class="pagination float-right">
                    @if ((Page + 1) > 1)
                    {
                        <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchConditions(Page - 1))">Previous</div></li>
                    }
                    <li class="page-item"><div class="page-link">Page @(results.Total == 0 ? 0 : (Page + 1)) of @(Math.Ceiling((double)results.Total / Size))</div></li>
                    @if ((Page + 1) < (Math.Ceiling((double)results.Total / Size)))
                    {
                        <li class="page-item pointer"><div class="page-link" @onclick="(() => SearchConditions(Page + 1))">Next</div></li>
                    }
                </ul>
            </nav>
        </div>
    </div>
}
else if(results.Total == 0 && Ready)
{
    <div class="row mt-5">
        <div class="col-md-12">
            <h5 class="text-center">No Data</h5>
            <h5 class="text-center">Try another reporting period.</h5>
        </div>
    </div>
}

@code {

    private bool Ready { get; set; } = false;
    private int Size { get; set; } = 10;
    private int Page { get; set; }
    private DateTime Start { get; set; } = DateTime.UtcNow.AddHours(-4).ToLocalTime();
    private DateTime End { get; set; } = DateTime.UtcNow.ToLocalTime();
    private ConditionSearchResponse results { get; set; } = new ConditionSearchResponse();
    private List<Period> Periods { get; set; } = new List<Period>();
    private PeriodType ReportPeriod { get; set; } = PeriodType.Today;

    protected override async Task OnParametersSetAsync()
    {
        Periods = Reporting.GetReportPeriods();

        await SearchConditions(0);
        Ready = true;
    }

    async public Task SearchConditions(int page)
    {
        var selectedPeriod = Periods.Where(p => p.PeriodType == ReportPeriod).FirstOrDefault();
        Start = selectedPeriod.Start.ToLocalTime();
        End = selectedPeriod.End.ToLocalTime();
        long localOffsetTicks = TimeZoneInfo.Local.BaseUtcOffset.Ticks;

        Page = page;
        results = await API.SearchConditions(Start.Ticks, End.Ticks, localOffsetTicks, Page, Size);
    }
}

